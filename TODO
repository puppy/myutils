【51CTO独家特稿】Linux双网卡绑定一个IP地址，实质工作就是使用两块网卡虚拟为一块，使用同一个IP地址，是我们能够得到更好的更快的服务。其实这项技术在Sun和Cisco中早已存在，被称为Trunking和Etherchannel技术，在Linux的2.4.x的内核中也采用这这种技术，被称为bonding。本文以Debian为例介绍这个技术的实现。

http://os.51cto.com/art/201102/245483.htm


FAI，debian版的kickstart

http://os.51cto.com/art/201102/245803.htm



打deb包
http://www.debian.org/doc/devel-manuals#maint-guide

aptitude show debhelper



cat bin/paste-img/Makefile 

#!/usr/bin/make -f

clean:
   rm -rf deb

deb:   clean
   -mkdir -p deb/DEBIAN
   cp -u control deb/DEBIAN
   -mkdir -p deb/usr/bin
   -mkdir -p deb/usr/share/applications
   -mkdir -p deb/usr/share/paste-img
   -mkdir -p deb/usr/share/pixmaps
   cp -u *.desktop deb/usr/share/applications
   cp -u *.pl *.glade *.png deb/usr/share/paste-img
   cd deb/usr/share/pixmaps; \
   ln -sf ../share/paste-img/*.png . ;\
   cd ../../../..
   cd deb/usr/bin; \
   ln -sf ../share/paste-img/*.pl . ;\
   cd ../../..
   dpkg-deb -b deb .
#   rm -r deb




google 后知道是 set -o vi，随便输入一条命令，再按 esc 键，然后可以对命令进行 vi 式的移动，替换等操作……


http://linux.chinaunix.net/techdoc/install/2006/05/09/932060.shtml



http://lug.ustc.edu.cn/wiki/server/pxe/start



"\e[A": history-search-backward
"\e[B": history-search-forward


ack-grep：grep的perl版替代品


http://huoding.com/2011/08/09/104
http://jcole.us/blog/archives/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/


\usepackage{hyperref}
\hypersetup{
        pdftitle={吉利项目测试环境部署文档},
        pdfsubject={吉利项目测试环境部署文档},
        pdfkeywords={apache mysql linux redis mongodb},
        pdfauthor={夏侯锋 xiahoufeng@chinatsp.com},
}




[备忘] 把 bzr 仓库转为 git 仓库
$ sudo apt-get install bzr-fastimport git-core
$ bzr clone lp:~lidaobing/iptux/iptux
$ cd iptux/
$ git init
$ bzr fast-export . | git fast-import
$ gitk --all
$ rm -r .bzr
$ git reset HEAD





LVM（逻辑卷管理）能将多个储存设备(包括分区，RAID设备等)合并成为一个新的储存设备。在这设备上可以建立多个分区。他支持动态调整分区大小，动态添加或删除底层设备。

安装

sudo apt-get install lvm2
sudo apt-get install e2fsprogs

创建

LVM 可以在磁盘的分区或者RAID上的分区(如/dev/md0)上创建

# pvcreate /dev/sdb /dev/sdc # 格式化分区为LVM格式
# vgcreate vg0 /dev/sdb /dev/sdc # 创建volume group
# vgdisplay vg0 # 显示volume group 信息
# apt-get install dmraid # 安装raid device map
# lvcreate -L 500G -n vol1 vg0 # 创建逻辑卷
# mke2fs -j /dev/vg0/vol1 # 在逻辑卷上创建 ext3 分区
# mount /dev/vg0/vol1 /mount/path

扩容 (无须停机)

# pvcreate /dev/sdd
# vgextend vg0 /dev/sdd
# lvextend -l +100%FREE /dev/vg0/vol1
# resize2fs -p /dev/vg0/vol1

磁盘损坏

还有额外的地方可以连接新的硬盘 (无须停机)

比如 /dev/sdb 损坏，接入的新硬盘叫 /dev/sde

# pvcreate /dev/sde # 格式化新硬盘
# vgextend vg0 /dev/sde # 添加新硬盘到卷组
# pvmove /dev/sda /dev/sde # 移动数据
# vgreduce vg0 /dev/sda # 卸载硬盘
没有额外的地方可以连接新硬盘

需要先缩小分区至可容纳在剩余的硬盘上

# pvmove /dev/sda # 移动数据至同组的其他硬盘
# vgreduce vg0 /dev/sda # 卸载硬盘
# 更换硬盘
# pvcreate /dev/sda
# vgextend vg0 /dev/sda



mysql命令行

pager less：设定less模式



安装好xbindkeys后，使用下面命令生成默认的配置文件，

$ xbindkeys --default > ~/.xbindkeysrc
   

$ xbindkeys -k # 单键
$ xbindkeys -mk # 组合键

运行上面的命令后按下想要设定的按键，将生成的字符序列拷贝到~/.xbindkeysrc中即可。


X的剪贴板

echo "Hello, world" | xclip  

gnome等的剪贴板
echo "Hello, world" | xclip -selection clipboard
# 接上面的扩容步骤





 PostgreSQL数据库是一款非常优秀的开源数据库，有丰富的的功能，在功能上是全面超越MySQL的一个开源数据库，在性能上也不比MysQL差，同时PostgreSQL与Ｏracle一样，都是进程架构，能更好的发挥出多CPU的性能。
大家可能都知道MySQL数据库，但很多人可能不是很清楚PostgreSQL数据库，这其实是有历史原因的。在互联网兴起之初，由于MySQL的ＭyIsam引擎没有事务，性能很好，而那时的PostgreSQL还在7.X版本之前，虽然功能上强大，但由于有了事务，性能上比MySQL有一定的差距，另PostgreSQL之初是做为教学数据库推出的，有很多先进的功能，但易用性上不如MySQL，所以在互联网之初，很多小网站都是使用MySQL的，很多开源的建站源码如博客系统、cms系统都是基于MySQL了。所以直到现在MySQL的人气是比PostgreSQL旺的。特别在中国，MySQL的流行程度是远超PostgreSQL的，但在近几年，这个情况在慢慢改观，如日本，PostgreSQL的流行程度是超过MySQL的，日本的很多大公司都在使用PostgreSQL数据库。

 在PostgreSQL数据库进入8.X版本后，易用性得到了大大改善，PostgreSQL也不再是教学数据库了。目前PostgreSQL最新版本是9.0.3。

 PostgreSQL支持hash join，sort merge join，有极其先进的SQL优化器，轻松处理复杂的SQL，支持丰富的数据类型。PostgreSQL有丰富的统计信息，可以很方便的定位性能问题。

 基于PostgreSQL的高可用方案和集群方案也是比MySQL多的，如在PostgreSQL中逻辑复制的软件有slony、bucardo，slony是master-slave架构，bucardo还能支持双master架构，基本中间件的软件如pgpool，pgpool是类似mysql下的mysql proxy的软件，但功能上比mysql proxy强大很多，有连接池、数据复制、failover、数据shard的功能。通过改告数据库形成的同步多master架构有cybercluster 、pgcluster。做数据水平拆分的有plproxy。

 在数据仓库领域的基于PostgreSQL有greenplum和gridsql，这两个软件都实现的跨节点的join功能，而且对性能做了很多的优化。

 如果说MySQL是一把锋利的匕首，那么PostgreSQL就是瑞士军刀。MySQL功能简单，适应特定业务场景，而PostgreSQL数据库，功能强大，几乎能适应全部数据库场景。在很多公司，把MySQL当做存储使用，但没有听说那个公司把Oracle和PostgreSQL当做存储使用，原因是MySQL功能少，很难在数据库层面上实现复杂业务，所以很多公司把MySQL当存储使用后，更多的复杂业务功能都是由开发写代码来实现，这其实是大大增加了开发成本。

 PostgreSQL最大的缺点就是了解PostgreSQL数据库的人不是很多，特别是在中国。目前我们公司在PostgreSQL数据库运行的最成功的案例，就是数据仓库的实时数据中心系统，这个系统由PostgreSQL+cobar的组成(cobar是一个我们公司开发的类似pgpool的软件，主要做数据shard)，这个系统目前已上线正式运行了。这个系统是取代原先的一个oracle数据库系统的。












[banping@linux ~]$ cd /home/banping/
[banping@linux ~]$ vi .bash_profile
#write log
exec /usr/bin/script -a -f -q /tmp/test/script-`date +%Y%m%d%k%M`.lst
这行脚本的意思是在/tmp/test目录下以时间为文件名来记录操作信息，由于是写在了.bash_profile文件中，用户登入到Linux系统的时候就会触发执行。
然后我们在/tmp下建立test目录存放操作日志信息即可：
[banping@linux tmp]# mkdir test
这样就实现了记录的功能，而要防止用户自行修改，我们可以设置这些文件只能被附加，不能被修改或删除：
[root@linux banping]# chattr +a .bash_profile




1.以crontab格式运行，例：同步时间服务器
代码示例：
cron{ ntpdate:
      command => “/usr/sbin/ntpdate 192.168.0.1″,
      user => root,
      minute =>’*/5′,
      require => Package["crontabs"];
        }
2.以文件的方式运行计划任务
代码示例：
file {
        ”/etc/cron.hourly/ntpdate”:
        mode => 755,
        owner => root,
        group => root,
        require => Package[ntp],
        content => template(“ntp/ntpdate.erb”),
        }




In library git-core, git has a command that makes all the commits appearing in graphs.

For example:
git log --graph --all

It is an other matter to make readable graphs. For that purpose, the following command is helpful to setup a special alias:
git config alias.graph "log --graph --date-order -C -M --pretty=format:\"<%h> %ad [%an] %Cgreen%d%Creset %s\" --all --date=short"

Then this command based on the alias above prints nice-looking graphs.
git graph







1，简单替换表达式
替换命令可以在全文中用一个单词替换另一个单词：
:%s/four/4/g
“%” 范围前缀表示在所有行中执行替换。最后的 “g” 标记表示替换行中的所有匹配点。如果仅仅对当前行进行操作，那么只要去掉%即可
如果你有一个象 “thirtyfour” 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成”thirty4″。要解决这个问题，用 “\&lt;&quot; 来指定匹配单词开头：
:%s/\” 来解决这个问题：
:%s/\/4/g
如果你在编码，你可能只想替换注释中的 “four”，而保留代码中的。由于这很难指定，可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你：
:%s/\/4/gc
2，删除多余的空格
要删除这些每行后面多余的空格，可以执行如下命令：
:%s/\s\+$//
命令前面指明范围是 “%”，所以这会作用于整个文件。”substitute” 命令的匹配模式是
“\s\+$”。这表示行末（$）前的一个或者多个（\+）空格（\s）。替换命令的 “to” 部分是空的：”//”。这样就会删除那些匹配的空白字符。
3，匹配重复性模式
星号项 “*” 规定在它前面的项可以重复任意次。因此:
/a*
匹配 “a”，”aa”，”aaa”，等等。但也匹配 “” (空字串)，因为零次也包含在内。星号 “*” 仅仅应用于那个紧邻在它前面的项。因此 “ab*” 匹配 “a”，”ab”，”abb”,”abbb”，等等。如要多次重复整个字符串，那么该字符串必须被组成一个项。组成一项的方法就是在它前面加 “\(“，后面加 “\)”。因此这个命令:
/\(ab\)*
匹配: “ab”，”abab”，”ababab”，等等。而且也匹配 “”。
要避免匹配空字串，使用 “\+”。这表示前面一项可以被匹配一次或多次。
/ab\+
匹配 “ab”，”abb”，”abbb”，等等。它不匹配 后面没有跟随 “b” 的 “a”。
要匹配一个可选项，用 “\=”。 例如:
/folders\=
匹配 “folder” 和 “folders”。
4，指定重复次数
要匹配某一项的特定次数重复，使用 “\{n,m}” 这样的形式。其中 “n” 和 “m” 都是数字。在它前面的那个项将被重复 “n” 到 “m” 次 (|inclusive| 包含 “n” 和 “m”)。例如:
/ab\{3,5}
匹配 “abbb”，”abbbb” 以及 “abbbbb”。
当 “n” 省略时，被默认为零。当 “m” 省略时，被默认为无限大。当 “,m” 省略时，就表示重复正好 “n” 次。例如:
模式          匹配次数
\{,4}           0，1，2，3 或 4
\{3,}           3，4，5，等等
\{0,1}          0 或 1，同 \=
\{0,}           0 或 更多，同 *
\{1,}           1 或 更多，同 \+
\{3}            3
5，多选一匹配
在一个查找模式中，”或” 运算符是 “\|”。例如:
/foo\|bar
这个命令匹配了 “foo” 或 “bar”。更多的抉择可以连在后面:
/one\|two\|three
匹配 “one”，”two” 或 “three”。
如要匹配其多次重复，那么整个抉择结构须置于 “\(” 和 “\)” 之间:
/\(foo\|bar\)\+
这个命令匹配 “foo”，”foobar”，”foofoo”，”barfoobar”，等等。
再举个例子:
/end\(if\|while\|for\)
这个命令匹配 “endif”，”endwhile” 和 “endfor”。
1，简单替换表达式
替换命令可以在全文中用一个单词替换另一个单词：
:%s/four/4/g

“%” 范围前缀表示在所有行中执行替换。最后的 “g” 标记表示替换行中的所有匹配点。如果仅仅对当前行进行操作，那么只要去掉%即可
如果你有一个象 “thirtyfour” 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成”thirty4″。要解决这个问题，用 “\&lt;&quot; 来指定匹配单词开头：
:%s/\” 来解决这个问题：
:%s/\/4/g

如果你在编码，你可能只想替换注释中的 “four”，而保留代码中的。由于这很难指定，可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你：
:%s/\/4/gc

2，删除多余的空格
要删除这些每行后面多余的空格，可以执行如下命令：
:%s/\s\+$//

命令前面指明范围是 “%”，所以这会作用于整个文件。”substitute” 命令的匹配模式是
“\s\+$”。这表示行末（$）前的一个或者多个（\+）空格（\s）。替换命令的 “to” 部分是空的：”//”。这样就会删除那些匹配的空白字符。

3，匹配重复性模式
星号项 “*” 规定在它前面的项可以重复任意次。因此:
/a*
匹配 “a”，”aa”，”aaa”，等等。但也匹配 “” (空字串)，因为零次也包含在内。星号 “*” 仅仅应用于那个紧邻在它前面的项。因此 “ab*” 匹配 “a”，”ab”，”abb”,”abbb”，等等。如要多次重复整个字符串，那么该字符串必须被组成一个项。组成一项的方法就是在它前面加 “\(“，后面加 “\)”。因此这个命令:
/\(ab\)*

匹配: “ab”，”abab”，”ababab”，等等。而且也匹配 “”。

要避免匹配空字串，使用 “\+”。这表示前面一项可以被匹配一次或多次。
/ab\+
匹配 “ab”，”abb”，”abbb”，等等。它不匹配 后面没有跟随 “b” 的 “a”。

要匹配一个可选项，用 “\=”。 例如:
/folders\=
匹配 “folder” 和 “folders”。

4，指定重复次数
要匹配某一项的特定次数重复，使用 “\{n,m}” 这样的形式。其中 “n” 和 “m” 都是数字。在它前面的那个项将被重复 “n” 到 “m” 次 (|inclusive| 包含 “n” 和 “m”)。例如:
/ab\{3,5}
匹配 “abbb”，”abbbb” 以及 “abbbbb”。
当 “n” 省略时，被默认为零。当 “m” 省略时，被默认为无限大。当 “,m” 省略时，就表示重复正好 “n” 次。例如:
模式          匹配次数
\{,4}           0，1，2，3 或 4
\{3,}           3，4，5，等等
\{0,1}          0 或 1，同 \=
\{0,}           0 或 更多，同 *
\{1,}           1 或 更多，同 \+
\{3}            3

5，多选一匹配
在一个查找模式中，”或” 运算符是 “\|”。例如:
/foo\|bar
这个命令匹配了 “foo” 或 “bar”。更多的抉择可以连在后面:
/one\|two\|three
匹配 “one”，”two” 或 “three”。

如要匹配其多次重复，那么整个抉择结构须置于 “\(” 和 “\)” 之间:
/\(foo\|bar\)\+
这个命令匹配 “foo”，”foobar”，”foofoo”，”barfoobar”，等等。

再举个例子:
/end\(if\|while\|for\)
这个命令匹配 “endif”，”endwhile” 和 “endfor”。